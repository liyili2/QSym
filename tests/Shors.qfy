//r is the order, this function is to do analysis, not the computation. We need to analysis that the shor's algorithm can produce r.
method Shors(q : Q[n], p : Q[n], n:nat, N : nat, base : nat, r:nat , c:nat) returns (y:nat, p : real)
  //requires 1 < base
  requires base < N
  //requires N <= 2 ^ n //if we do not want allow this syntax, fine.
  //requires gcd(base,N) == 1
  //requires order(base,N) == r //define order function
  // requires { q[0 , n) : nor ↦ |0⟩ }
  // requires { p[0 , n) : nor ↦ |0⟩ }
  //we should have a way of only specifying basis.
  //but we also care about amplitudes here.
  //ensures y == c * 2^n / r
  //ensures p == 4 / (pi * pi * r) //real number
{
  q[0, n) *= H;
  // p[0, n) *= λ (x => |(x + 1) % 2  ⟩);
  
  for i in [0, n)
   // invariant {
   //   q[0, i), p[0, n) : en ↦ ∑ k ∈ [0, 2^i) . 1/sqrt(2^i) | k ⟩ | (base ^ k) % N ⟩
   // }
   // invariant {
   //   q [i , n) : had ↦ |+⟩
   // }
  {
    //quantum mod-mult requires gcd(base,N) == 1 to implement, otherwise, it is not implementable.
    p[0, N) *= λ (x => |base ^ (2 ^ i) * x % N⟩);

    // This is super hacky, but I have no good way to do this now....
    // TODO: find out one way to take the reference of the underlying range
    // e.g. [[ p[0 .. N] ]] ?
    //#LemmaPowEquiv(p_seq'nat'_7__emit, base, i, N);
  }

  v,prob *= measure(p[0,n));//we do not care about the v and prob value here. only the partial measurement of p
  //assert { q[0, n) : en ↦ ∑ k ∈ [0, 2^n / r) . 1 / sqrt(2^n / r) |v + r * k⟩ }; //we can keep the format of sqrt(2^n / r), and I think the case is general in any algorithm
  q[0,n) *= QFT;
  //we need to have a way of dealing with 2^n / r, the sum actually does not matter, we need to say 2^n/r as nat is 2^n/r round to bottom nat
  //in the following ω (v * x + r * k * x, 2^n) can be break down ω (v * x) * ω (r * k * x, 2^n), and the first one is one since it can be moved out of the sum k.
  //assert { q[0, n) : en(1) ↦ ∑ x ∈ [0, 2^n) . ∑ k ∈ [0, 2 ^ n / r) . 1 / sqrt(2^n / r) * 1 / sqrt(2^n) * ω (v * x + r * k * x, 2^n) |x⟩ };
  y,p *= measure(q[0,n));
  //will need to support a lemma (does not need proof), to show that ∑ k ∈ [0 .. 2^n / r] . ω (r * k * x, 2^n) is 4 / (pi * pi * r) when y = c * 2^n / r
}  

