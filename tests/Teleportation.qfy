// Quantum Teleporation
// https://en.wikipedia.org/wiki/Quantum_teleportation

// q and p are messages, we want to check if they are equal. r is initialized to all zeroes
// r is one qubit. q and p are n qubits.
method Teleporation(q: Q[1], p: Q[1], r: Q[1]) returns (y:nat, prob:real)
//    requires { q[0] : en ↦ ∑ j ∈ [0 , 2) . a[j] |j⟩ } //a is an array (pair) of complex number a[0] and a[1]
//    requires { p[0] : nor ↦ |0⟩ }
//    requires { r[0] : nor ↦ |0⟩ }
//    ensures { r[0] : en ↦ ∑ j ∈ [0 , 2). a[j] |j⟩  }//qubit is teleported to r[0]
{
    p[0] *= H;
    if (p[0]) { r[0]  *= λ (x => ((x + 1) % 2)); }
    //assert { p[0],r[0] : en ↦ ∑ k ∈ [0 , 2) . 1/sqrt(2) |k⟩|k⟩ } ; //this assetion should not be needed
    
    if (q[0]) { p[0]  *= λ (x => ((x + 1) % 2)); }
    
    //assert { q[0], p[0],r[0] : en ↦ ∑ j ∈ [0 , 2) . ∑ k ∈ [0 , 2) . 1/sqrt(2) * a[j] |j⟩|j ⊕ k⟩|k⟩ } //this assetion should not be needed
    
    q[0] *= H;
    
    //assert { q[0], p[0],r[0] : en ↦ (∑ j ∈ [0 , 2) . ∑ k ∈ [0 , 2) . 1/2 * a[j] . |P(j)⟩|j ⊕ k⟩|k⟩) }
    //P(j) is the hadamard-basis of the qubits as + , -, where P(0) = + and P(1) = -

    y,p1 := measure(p[0]); //y = j ⊕ k and p1 is igoared, it should be 1/2
    
    //assert { q[0], r[0] : en ↦ ∑ j ∈ [0 , 2) . ∑ k ∈ [0 , 2) . 1/sqrt(2) * a[j] . |P(j)⟩|k⟩ && y == j ⊕ k}
    // measurement leads to that y == j ⊕ k, and we remove the ket |j ⊕ k⟩ 

    z,p2 := measure(q[0]); // z == 0 || z == 1, and p2 = 1/2

    //assert { r[0] : en ↦ ∑ j ∈ [0 , 2) . ∑ k ∈ [0 , 2) . a[j] . ω (z * j, 2) . |k⟩ && y == j ⊕ k}
    
    if (y==1) { r[0] *= λ (x => ((x + 1) % 2)); } //permit viewing a bit as a bool value, an X gate
    
   // assert { r[0] : en ↦ ∑ j ∈ [0 , 2) . a[j] . ω (z * j, 2) . |j⟩}
    //this is valid because if y {apply X gate} means |k⟩ ==> |k ⊕ y ⟩ == |k ⊕ j ⊕ k ⟩ == | j ⟩
    
    if (z==1) { r[0] *= λ (x => ω (1 * x, 2) ~ (x)); } //a Z gate
    
    //assert { r[0] : en ↦ ∑ j ∈ [0 , 2) . a[j] |j⟩ };
    //same as the output, if z == 0, then, ω (z * j , 2) == ω (0, 2) == 1
    //if z == 1, then, the phase becomes ω (z * j, 2) . ω (1 * j, 2) == ω ((z+1)*j, 2) == ω (0*j, 2) == 1
}
